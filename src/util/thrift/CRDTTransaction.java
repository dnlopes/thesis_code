/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package util.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-7")
public class CRDTTransaction implements org.apache.thrift.TBase<CRDTTransaction, CRDTTransaction._Fields>, java.io.Serializable, Cloneable, Comparable<CRDTTransaction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CRDTTransaction");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TXN_CLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("txnClock", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("opsList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CRDTTransactionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CRDTTransactionTupleSchemeFactory());
  }

  public int id; // required
  public String txnClock; // required
  public List<CRDTOperation> opsList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TXN_CLOCK((short)2, "txnClock"),
    OPS_LIST((short)3, "opsList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TXN_CLOCK
          return TXN_CLOCK;
        case 3: // OPS_LIST
          return OPS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TXN_CLOCK, new org.apache.thrift.meta_data.FieldMetaData("txnClock", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPS_LIST, new org.apache.thrift.meta_data.FieldMetaData("opsList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CRDTOperation.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CRDTTransaction.class, metaDataMap);
  }

  public CRDTTransaction() {
  }

  public CRDTTransaction(
    int id,
    String txnClock,
    List<CRDTOperation> opsList)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.txnClock = txnClock;
    this.opsList = opsList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CRDTTransaction(CRDTTransaction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTxnClock()) {
      this.txnClock = other.txnClock;
    }
    if (other.isSetOpsList()) {
      List<CRDTOperation> __this__opsList = new ArrayList<CRDTOperation>(other.opsList.size());
      for (CRDTOperation other_element : other.opsList) {
        __this__opsList.add(new CRDTOperation(other_element));
      }
      this.opsList = __this__opsList;
    }
  }

  public CRDTTransaction deepCopy() {
    return new CRDTTransaction(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.txnClock = null;
    this.opsList = null;
  }

  public int getId() {
    return this.id;
  }

  public CRDTTransaction setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getTxnClock() {
    return this.txnClock;
  }

  public CRDTTransaction setTxnClock(String txnClock) {
    this.txnClock = txnClock;
    return this;
  }

  public void unsetTxnClock() {
    this.txnClock = null;
  }

  /** Returns true if field txnClock is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnClock() {
    return this.txnClock != null;
  }

  public void setTxnClockIsSet(boolean value) {
    if (!value) {
      this.txnClock = null;
    }
  }

  public int getOpsListSize() {
    return (this.opsList == null) ? 0 : this.opsList.size();
  }

  public java.util.Iterator<CRDTOperation> getOpsListIterator() {
    return (this.opsList == null) ? null : this.opsList.iterator();
  }

  public void addToOpsList(CRDTOperation elem) {
    if (this.opsList == null) {
      this.opsList = new ArrayList<CRDTOperation>();
    }
    this.opsList.add(elem);
  }

  public List<CRDTOperation> getOpsList() {
    return this.opsList;
  }

  public CRDTTransaction setOpsList(List<CRDTOperation> opsList) {
    this.opsList = opsList;
    return this;
  }

  public void unsetOpsList() {
    this.opsList = null;
  }

  /** Returns true if field opsList is set (has been assigned a value) and false otherwise */
  public boolean isSetOpsList() {
    return this.opsList != null;
  }

  public void setOpsListIsSet(boolean value) {
    if (!value) {
      this.opsList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TXN_CLOCK:
      if (value == null) {
        unsetTxnClock();
      } else {
        setTxnClock((String)value);
      }
      break;

    case OPS_LIST:
      if (value == null) {
        unsetOpsList();
      } else {
        setOpsList((List<CRDTOperation>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case TXN_CLOCK:
      return getTxnClock();

    case OPS_LIST:
      return getOpsList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TXN_CLOCK:
      return isSetTxnClock();
    case OPS_LIST:
      return isSetOpsList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CRDTTransaction)
      return this.equals((CRDTTransaction)that);
    return false;
  }

  public boolean equals(CRDTTransaction that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_txnClock = true && this.isSetTxnClock();
    boolean that_present_txnClock = true && that.isSetTxnClock();
    if (this_present_txnClock || that_present_txnClock) {
      if (!(this_present_txnClock && that_present_txnClock))
        return false;
      if (!this.txnClock.equals(that.txnClock))
        return false;
    }

    boolean this_present_opsList = true && this.isSetOpsList();
    boolean that_present_opsList = true && that.isSetOpsList();
    if (this_present_opsList || that_present_opsList) {
      if (!(this_present_opsList && that_present_opsList))
        return false;
      if (!this.opsList.equals(that.opsList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_txnClock = true && (isSetTxnClock());
    list.add(present_txnClock);
    if (present_txnClock)
      list.add(txnClock);

    boolean present_opsList = true && (isSetOpsList());
    list.add(present_opsList);
    if (present_opsList)
      list.add(opsList);

    return list.hashCode();
  }

  @Override
  public int compareTo(CRDTTransaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxnClock()).compareTo(other.isSetTxnClock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnClock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnClock, other.txnClock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpsList()).compareTo(other.isSetOpsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opsList, other.opsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CRDTTransaction(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txnClock:");
    if (this.txnClock == null) {
      sb.append("null");
    } else {
      sb.append(this.txnClock);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opsList:");
    if (this.opsList == null) {
      sb.append("null");
    } else {
      sb.append(this.opsList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (txnClock == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'txnClock' was not present! Struct: " + toString());
    }
    if (opsList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'opsList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CRDTTransactionStandardSchemeFactory implements SchemeFactory {
    public CRDTTransactionStandardScheme getScheme() {
      return new CRDTTransactionStandardScheme();
    }
  }

  private static class CRDTTransactionStandardScheme extends StandardScheme<CRDTTransaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CRDTTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TXN_CLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.txnClock = iprot.readString();
              struct.setTxnClockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.opsList = new ArrayList<CRDTOperation>(_list62.size);
                CRDTOperation _elem63;
                for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                {
                  _elem63 = new CRDTOperation();
                  _elem63.read(iprot);
                  struct.opsList.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setOpsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CRDTTransaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.txnClock != null) {
        oprot.writeFieldBegin(TXN_CLOCK_FIELD_DESC);
        oprot.writeString(struct.txnClock);
        oprot.writeFieldEnd();
      }
      if (struct.opsList != null) {
        oprot.writeFieldBegin(OPS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.opsList.size()));
          for (CRDTOperation _iter65 : struct.opsList)
          {
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CRDTTransactionTupleSchemeFactory implements SchemeFactory {
    public CRDTTransactionTupleScheme getScheme() {
      return new CRDTTransactionTupleScheme();
    }
  }

  private static class CRDTTransactionTupleScheme extends TupleScheme<CRDTTransaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CRDTTransaction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeString(struct.txnClock);
      {
        oprot.writeI32(struct.opsList.size());
        for (CRDTOperation _iter66 : struct.opsList)
        {
          _iter66.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CRDTTransaction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.txnClock = iprot.readString();
      struct.setTxnClockIsSet(true);
      {
        org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.opsList = new ArrayList<CRDTOperation>(_list67.size);
        CRDTOperation _elem68;
        for (int _i69 = 0; _i69 < _list67.size; ++_i69)
        {
          _elem68 = new CRDTOperation();
          _elem68.read(iprot);
          struct.opsList.add(_elem68);
        }
      }
      struct.setOpsListIsSet(true);
    }
  }

}

