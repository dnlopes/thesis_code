/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package util.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-29")
public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable, Comparable<Request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField REQUIRES_COORDINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("requiresCoordination", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("requests", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestTupleSchemeFactory());
  }

  public boolean requiresCoordination; // required
  public List<RequestUnit> requests; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUIRES_COORDINATION((short)1, "requiresCoordination"),
    REQUESTS((short)2, "requests");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUIRES_COORDINATION
          return REQUIRES_COORDINATION;
        case 2: // REQUESTS
          return REQUESTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUIRESCOORDINATION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUIRES_COORDINATION, new org.apache.thrift.meta_data.FieldMetaData("requiresCoordination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("requests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestUnit.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
  }

  public Request(
    boolean requiresCoordination,
    List<RequestUnit> requests)
  {
    this();
    this.requiresCoordination = requiresCoordination;
    setRequiresCoordinationIsSet(true);
    this.requests = requests;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bitfield = other.__isset_bitfield;
    this.requiresCoordination = other.requiresCoordination;
    if (other.isSetRequests()) {
      List<RequestUnit> __this__requests = new ArrayList<RequestUnit>(other.requests.size());
      for (RequestUnit other_element : other.requests) {
        __this__requests.add(new RequestUnit(other_element));
      }
      this.requests = __this__requests;
    }
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    setRequiresCoordinationIsSet(false);
    this.requiresCoordination = false;
    this.requests = null;
  }

  public boolean isRequiresCoordination() {
    return this.requiresCoordination;
  }

  public Request setRequiresCoordination(boolean requiresCoordination) {
    this.requiresCoordination = requiresCoordination;
    setRequiresCoordinationIsSet(true);
    return this;
  }

  public void unsetRequiresCoordination() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUIRESCOORDINATION_ISSET_ID);
  }

  /** Returns true if field requiresCoordination is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiresCoordination() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUIRESCOORDINATION_ISSET_ID);
  }

  public void setRequiresCoordinationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUIRESCOORDINATION_ISSET_ID, value);
  }

  public int getRequestsSize() {
    return (this.requests == null) ? 0 : this.requests.size();
  }

  public java.util.Iterator<RequestUnit> getRequestsIterator() {
    return (this.requests == null) ? null : this.requests.iterator();
  }

  public void addToRequests(RequestUnit elem) {
    if (this.requests == null) {
      this.requests = new ArrayList<RequestUnit>();
    }
    this.requests.add(elem);
  }

  public List<RequestUnit> getRequests() {
    return this.requests;
  }

  public Request setRequests(List<RequestUnit> requests) {
    this.requests = requests;
    return this;
  }

  public void unsetRequests() {
    this.requests = null;
  }

  /** Returns true if field requests is set (has been assigned a value) and false otherwise */
  public boolean isSetRequests() {
    return this.requests != null;
  }

  public void setRequestsIsSet(boolean value) {
    if (!value) {
      this.requests = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUIRES_COORDINATION:
      if (value == null) {
        unsetRequiresCoordination();
      } else {
        setRequiresCoordination((Boolean)value);
      }
      break;

    case REQUESTS:
      if (value == null) {
        unsetRequests();
      } else {
        setRequests((List<RequestUnit>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUIRES_COORDINATION:
      return Boolean.valueOf(isRequiresCoordination());

    case REQUESTS:
      return getRequests();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUIRES_COORDINATION:
      return isSetRequiresCoordination();
    case REQUESTS:
      return isSetRequests();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;

    boolean this_present_requiresCoordination = true;
    boolean that_present_requiresCoordination = true;
    if (this_present_requiresCoordination || that_present_requiresCoordination) {
      if (!(this_present_requiresCoordination && that_present_requiresCoordination))
        return false;
      if (this.requiresCoordination != that.requiresCoordination)
        return false;
    }

    boolean this_present_requests = true && this.isSetRequests();
    boolean that_present_requests = true && that.isSetRequests();
    if (this_present_requests || that_present_requests) {
      if (!(this_present_requests && that_present_requests))
        return false;
      if (!this.requests.equals(that.requests))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_requiresCoordination = true;
    list.add(present_requiresCoordination);
    if (present_requiresCoordination)
      list.add(requiresCoordination);

    boolean present_requests = true && (isSetRequests());
    list.add(present_requests);
    if (present_requests)
      list.add(requests);

    return list.hashCode();
  }

  @Override
  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequiresCoordination()).compareTo(other.isSetRequiresCoordination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiresCoordination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiresCoordination, other.requiresCoordination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequests()).compareTo(other.isSetRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requests, other.requests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Request(");
    boolean first = true;

    sb.append("requiresCoordination:");
    sb.append(this.requiresCoordination);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requests:");
    if (this.requests == null) {
      sb.append("null");
    } else {
      sb.append(this.requests);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements SchemeFactory {
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends StandardScheme<Request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUIRES_COORDINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.requiresCoordination = iprot.readBool();
              struct.setRequiresCoordinationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.requests = new ArrayList<RequestUnit>(_list62.size);
                RequestUnit _elem63;
                for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                {
                  _elem63 = new RequestUnit();
                  _elem63.read(iprot);
                  struct.requests.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQUIRES_COORDINATION_FIELD_DESC);
      oprot.writeBool(struct.requiresCoordination);
      oprot.writeFieldEnd();
      if (struct.requests != null) {
        oprot.writeFieldBegin(REQUESTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.requests.size()));
          for (RequestUnit _iter65 : struct.requests)
          {
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements SchemeFactory {
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRequiresCoordination()) {
        optionals.set(0);
      }
      if (struct.isSetRequests()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRequiresCoordination()) {
        oprot.writeBool(struct.requiresCoordination);
      }
      if (struct.isSetRequests()) {
        {
          oprot.writeI32(struct.requests.size());
          for (RequestUnit _iter66 : struct.requests)
          {
            _iter66.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.requiresCoordination = iprot.readBool();
        struct.setRequiresCoordinationIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.requests = new ArrayList<RequestUnit>(_list67.size);
          RequestUnit _elem68;
          for (int _i69 = 0; _i69 < _list67.size; ++_i69)
          {
            _elem68 = new RequestUnit();
            _elem68.read(iprot);
            struct.requests.add(_elem68);
          }
        }
        struct.setRequestsIsSet(true);
      }
    }
  }

}

