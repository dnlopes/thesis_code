/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package util.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-7")
public class CRDTOperation implements org.apache.thrift.TBase<CRDTOperation, CRDTOperation._Fields>, java.io.Serializable, Cloneable, Comparable<CRDTOperation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CRDTOperation");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRIMARY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UNIQUE_PK_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("uniquePkValue", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("opType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NEW_FIELD_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("newFieldValues", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField OLD_FIELD_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("oldFieldValues", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField PARENTS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("parentsMap", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CRDTOperationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CRDTOperationTupleSchemeFactory());
  }

  public String tableName; // required
  public String primaryKey; // required
  public String uniquePkValue; // required
  /**
   * 
   * @see CRDTOperationType
   */
  public CRDTOperationType opType; // required
  public Map<String,String> newFieldValues; // optional
  public Map<String,String> oldFieldValues; // optional
  public Map<String,String> parentsMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    PRIMARY_KEY((short)2, "primaryKey"),
    UNIQUE_PK_VALUE((short)3, "uniquePkValue"),
    /**
     * 
     * @see CRDTOperationType
     */
    OP_TYPE((short)4, "opType"),
    NEW_FIELD_VALUES((short)5, "newFieldValues"),
    OLD_FIELD_VALUES((short)6, "oldFieldValues"),
    PARENTS_MAP((short)7, "parentsMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // PRIMARY_KEY
          return PRIMARY_KEY;
        case 3: // UNIQUE_PK_VALUE
          return UNIQUE_PK_VALUE;
        case 4: // OP_TYPE
          return OP_TYPE;
        case 5: // NEW_FIELD_VALUES
          return NEW_FIELD_VALUES;
        case 6: // OLD_FIELD_VALUES
          return OLD_FIELD_VALUES;
        case 7: // PARENTS_MAP
          return PARENTS_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.NEW_FIELD_VALUES,_Fields.OLD_FIELD_VALUES,_Fields.PARENTS_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIMARY_KEY, new org.apache.thrift.meta_data.FieldMetaData("primaryKey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIQUE_PK_VALUE, new org.apache.thrift.meta_data.FieldMetaData("uniquePkValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("opType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CRDTOperationType.class)));
    tmpMap.put(_Fields.NEW_FIELD_VALUES, new org.apache.thrift.meta_data.FieldMetaData("newFieldValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OLD_FIELD_VALUES, new org.apache.thrift.meta_data.FieldMetaData("oldFieldValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARENTS_MAP, new org.apache.thrift.meta_data.FieldMetaData("parentsMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CRDTOperation.class, metaDataMap);
  }

  public CRDTOperation() {
  }

  public CRDTOperation(
    String tableName,
    String primaryKey,
    String uniquePkValue,
    CRDTOperationType opType)
  {
    this();
    this.tableName = tableName;
    this.primaryKey = primaryKey;
    this.uniquePkValue = uniquePkValue;
    this.opType = opType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CRDTOperation(CRDTOperation other) {
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetPrimaryKey()) {
      this.primaryKey = other.primaryKey;
    }
    if (other.isSetUniquePkValue()) {
      this.uniquePkValue = other.uniquePkValue;
    }
    if (other.isSetOpType()) {
      this.opType = other.opType;
    }
    if (other.isSetNewFieldValues()) {
      Map<String,String> __this__newFieldValues = new HashMap<String,String>(other.newFieldValues);
      this.newFieldValues = __this__newFieldValues;
    }
    if (other.isSetOldFieldValues()) {
      Map<String,String> __this__oldFieldValues = new HashMap<String,String>(other.oldFieldValues);
      this.oldFieldValues = __this__oldFieldValues;
    }
    if (other.isSetParentsMap()) {
      Map<String,String> __this__parentsMap = new HashMap<String,String>(other.parentsMap);
      this.parentsMap = __this__parentsMap;
    }
  }

  public CRDTOperation deepCopy() {
    return new CRDTOperation(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    this.primaryKey = null;
    this.uniquePkValue = null;
    this.opType = null;
    this.newFieldValues = null;
    this.oldFieldValues = null;
    this.parentsMap = null;
  }

  public String getTableName() {
    return this.tableName;
  }

  public CRDTOperation setTableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public String getPrimaryKey() {
    return this.primaryKey;
  }

  public CRDTOperation setPrimaryKey(String primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

  public void unsetPrimaryKey() {
    this.primaryKey = null;
  }

  /** Returns true if field primaryKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimaryKey() {
    return this.primaryKey != null;
  }

  public void setPrimaryKeyIsSet(boolean value) {
    if (!value) {
      this.primaryKey = null;
    }
  }

  public String getUniquePkValue() {
    return this.uniquePkValue;
  }

  public CRDTOperation setUniquePkValue(String uniquePkValue) {
    this.uniquePkValue = uniquePkValue;
    return this;
  }

  public void unsetUniquePkValue() {
    this.uniquePkValue = null;
  }

  /** Returns true if field uniquePkValue is set (has been assigned a value) and false otherwise */
  public boolean isSetUniquePkValue() {
    return this.uniquePkValue != null;
  }

  public void setUniquePkValueIsSet(boolean value) {
    if (!value) {
      this.uniquePkValue = null;
    }
  }

  /**
   * 
   * @see CRDTOperationType
   */
  public CRDTOperationType getOpType() {
    return this.opType;
  }

  /**
   * 
   * @see CRDTOperationType
   */
  public CRDTOperation setOpType(CRDTOperationType opType) {
    this.opType = opType;
    return this;
  }

  public void unsetOpType() {
    this.opType = null;
  }

  /** Returns true if field opType is set (has been assigned a value) and false otherwise */
  public boolean isSetOpType() {
    return this.opType != null;
  }

  public void setOpTypeIsSet(boolean value) {
    if (!value) {
      this.opType = null;
    }
  }

  public int getNewFieldValuesSize() {
    return (this.newFieldValues == null) ? 0 : this.newFieldValues.size();
  }

  public void putToNewFieldValues(String key, String val) {
    if (this.newFieldValues == null) {
      this.newFieldValues = new HashMap<String,String>();
    }
    this.newFieldValues.put(key, val);
  }

  public Map<String,String> getNewFieldValues() {
    return this.newFieldValues;
  }

  public CRDTOperation setNewFieldValues(Map<String,String> newFieldValues) {
    this.newFieldValues = newFieldValues;
    return this;
  }

  public void unsetNewFieldValues() {
    this.newFieldValues = null;
  }

  /** Returns true if field newFieldValues is set (has been assigned a value) and false otherwise */
  public boolean isSetNewFieldValues() {
    return this.newFieldValues != null;
  }

  public void setNewFieldValuesIsSet(boolean value) {
    if (!value) {
      this.newFieldValues = null;
    }
  }

  public int getOldFieldValuesSize() {
    return (this.oldFieldValues == null) ? 0 : this.oldFieldValues.size();
  }

  public void putToOldFieldValues(String key, String val) {
    if (this.oldFieldValues == null) {
      this.oldFieldValues = new HashMap<String,String>();
    }
    this.oldFieldValues.put(key, val);
  }

  public Map<String,String> getOldFieldValues() {
    return this.oldFieldValues;
  }

  public CRDTOperation setOldFieldValues(Map<String,String> oldFieldValues) {
    this.oldFieldValues = oldFieldValues;
    return this;
  }

  public void unsetOldFieldValues() {
    this.oldFieldValues = null;
  }

  /** Returns true if field oldFieldValues is set (has been assigned a value) and false otherwise */
  public boolean isSetOldFieldValues() {
    return this.oldFieldValues != null;
  }

  public void setOldFieldValuesIsSet(boolean value) {
    if (!value) {
      this.oldFieldValues = null;
    }
  }

  public int getParentsMapSize() {
    return (this.parentsMap == null) ? 0 : this.parentsMap.size();
  }

  public void putToParentsMap(String key, String val) {
    if (this.parentsMap == null) {
      this.parentsMap = new HashMap<String,String>();
    }
    this.parentsMap.put(key, val);
  }

  public Map<String,String> getParentsMap() {
    return this.parentsMap;
  }

  public CRDTOperation setParentsMap(Map<String,String> parentsMap) {
    this.parentsMap = parentsMap;
    return this;
  }

  public void unsetParentsMap() {
    this.parentsMap = null;
  }

  /** Returns true if field parentsMap is set (has been assigned a value) and false otherwise */
  public boolean isSetParentsMap() {
    return this.parentsMap != null;
  }

  public void setParentsMapIsSet(boolean value) {
    if (!value) {
      this.parentsMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case PRIMARY_KEY:
      if (value == null) {
        unsetPrimaryKey();
      } else {
        setPrimaryKey((String)value);
      }
      break;

    case UNIQUE_PK_VALUE:
      if (value == null) {
        unsetUniquePkValue();
      } else {
        setUniquePkValue((String)value);
      }
      break;

    case OP_TYPE:
      if (value == null) {
        unsetOpType();
      } else {
        setOpType((CRDTOperationType)value);
      }
      break;

    case NEW_FIELD_VALUES:
      if (value == null) {
        unsetNewFieldValues();
      } else {
        setNewFieldValues((Map<String,String>)value);
      }
      break;

    case OLD_FIELD_VALUES:
      if (value == null) {
        unsetOldFieldValues();
      } else {
        setOldFieldValues((Map<String,String>)value);
      }
      break;

    case PARENTS_MAP:
      if (value == null) {
        unsetParentsMap();
      } else {
        setParentsMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case PRIMARY_KEY:
      return getPrimaryKey();

    case UNIQUE_PK_VALUE:
      return getUniquePkValue();

    case OP_TYPE:
      return getOpType();

    case NEW_FIELD_VALUES:
      return getNewFieldValues();

    case OLD_FIELD_VALUES:
      return getOldFieldValues();

    case PARENTS_MAP:
      return getParentsMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case PRIMARY_KEY:
      return isSetPrimaryKey();
    case UNIQUE_PK_VALUE:
      return isSetUniquePkValue();
    case OP_TYPE:
      return isSetOpType();
    case NEW_FIELD_VALUES:
      return isSetNewFieldValues();
    case OLD_FIELD_VALUES:
      return isSetOldFieldValues();
    case PARENTS_MAP:
      return isSetParentsMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CRDTOperation)
      return this.equals((CRDTOperation)that);
    return false;
  }

  public boolean equals(CRDTOperation that) {
    if (that == null)
      return false;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_primaryKey = true && this.isSetPrimaryKey();
    boolean that_present_primaryKey = true && that.isSetPrimaryKey();
    if (this_present_primaryKey || that_present_primaryKey) {
      if (!(this_present_primaryKey && that_present_primaryKey))
        return false;
      if (!this.primaryKey.equals(that.primaryKey))
        return false;
    }

    boolean this_present_uniquePkValue = true && this.isSetUniquePkValue();
    boolean that_present_uniquePkValue = true && that.isSetUniquePkValue();
    if (this_present_uniquePkValue || that_present_uniquePkValue) {
      if (!(this_present_uniquePkValue && that_present_uniquePkValue))
        return false;
      if (!this.uniquePkValue.equals(that.uniquePkValue))
        return false;
    }

    boolean this_present_opType = true && this.isSetOpType();
    boolean that_present_opType = true && that.isSetOpType();
    if (this_present_opType || that_present_opType) {
      if (!(this_present_opType && that_present_opType))
        return false;
      if (!this.opType.equals(that.opType))
        return false;
    }

    boolean this_present_newFieldValues = true && this.isSetNewFieldValues();
    boolean that_present_newFieldValues = true && that.isSetNewFieldValues();
    if (this_present_newFieldValues || that_present_newFieldValues) {
      if (!(this_present_newFieldValues && that_present_newFieldValues))
        return false;
      if (!this.newFieldValues.equals(that.newFieldValues))
        return false;
    }

    boolean this_present_oldFieldValues = true && this.isSetOldFieldValues();
    boolean that_present_oldFieldValues = true && that.isSetOldFieldValues();
    if (this_present_oldFieldValues || that_present_oldFieldValues) {
      if (!(this_present_oldFieldValues && that_present_oldFieldValues))
        return false;
      if (!this.oldFieldValues.equals(that.oldFieldValues))
        return false;
    }

    boolean this_present_parentsMap = true && this.isSetParentsMap();
    boolean that_present_parentsMap = true && that.isSetParentsMap();
    if (this_present_parentsMap || that_present_parentsMap) {
      if (!(this_present_parentsMap && that_present_parentsMap))
        return false;
      if (!this.parentsMap.equals(that.parentsMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tableName = true && (isSetTableName());
    list.add(present_tableName);
    if (present_tableName)
      list.add(tableName);

    boolean present_primaryKey = true && (isSetPrimaryKey());
    list.add(present_primaryKey);
    if (present_primaryKey)
      list.add(primaryKey);

    boolean present_uniquePkValue = true && (isSetUniquePkValue());
    list.add(present_uniquePkValue);
    if (present_uniquePkValue)
      list.add(uniquePkValue);

    boolean present_opType = true && (isSetOpType());
    list.add(present_opType);
    if (present_opType)
      list.add(opType.getValue());

    boolean present_newFieldValues = true && (isSetNewFieldValues());
    list.add(present_newFieldValues);
    if (present_newFieldValues)
      list.add(newFieldValues);

    boolean present_oldFieldValues = true && (isSetOldFieldValues());
    list.add(present_oldFieldValues);
    if (present_oldFieldValues)
      list.add(oldFieldValues);

    boolean present_parentsMap = true && (isSetParentsMap());
    list.add(present_parentsMap);
    if (present_parentsMap)
      list.add(parentsMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(CRDTOperation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrimaryKey()).compareTo(other.isSetPrimaryKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimaryKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryKey, other.primaryKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUniquePkValue()).compareTo(other.isSetUniquePkValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniquePkValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniquePkValue, other.uniquePkValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpType()).compareTo(other.isSetOpType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opType, other.opType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewFieldValues()).compareTo(other.isSetNewFieldValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewFieldValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newFieldValues, other.newFieldValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldFieldValues()).compareTo(other.isSetOldFieldValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldFieldValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldFieldValues, other.oldFieldValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentsMap()).compareTo(other.isSetParentsMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentsMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentsMap, other.parentsMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CRDTOperation(");
    boolean first = true;

    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("primaryKey:");
    if (this.primaryKey == null) {
      sb.append("null");
    } else {
      sb.append(this.primaryKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uniquePkValue:");
    if (this.uniquePkValue == null) {
      sb.append("null");
    } else {
      sb.append(this.uniquePkValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opType:");
    if (this.opType == null) {
      sb.append("null");
    } else {
      sb.append(this.opType);
    }
    first = false;
    if (isSetNewFieldValues()) {
      if (!first) sb.append(", ");
      sb.append("newFieldValues:");
      if (this.newFieldValues == null) {
        sb.append("null");
      } else {
        sb.append(this.newFieldValues);
      }
      first = false;
    }
    if (isSetOldFieldValues()) {
      if (!first) sb.append(", ");
      sb.append("oldFieldValues:");
      if (this.oldFieldValues == null) {
        sb.append("null");
      } else {
        sb.append(this.oldFieldValues);
      }
      first = false;
    }
    if (isSetParentsMap()) {
      if (!first) sb.append(", ");
      sb.append("parentsMap:");
      if (this.parentsMap == null) {
        sb.append("null");
      } else {
        sb.append(this.parentsMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableName' was not present! Struct: " + toString());
    }
    if (primaryKey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'primaryKey' was not present! Struct: " + toString());
    }
    if (uniquePkValue == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uniquePkValue' was not present! Struct: " + toString());
    }
    if (opType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'opType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CRDTOperationStandardSchemeFactory implements SchemeFactory {
    public CRDTOperationStandardScheme getScheme() {
      return new CRDTOperationStandardScheme();
    }
  }

  private static class CRDTOperationStandardScheme extends StandardScheme<CRDTOperation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CRDTOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIMARY_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.primaryKey = iprot.readString();
              struct.setPrimaryKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNIQUE_PK_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uniquePkValue = iprot.readString();
              struct.setUniquePkValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.opType = util.thrift.CRDTOperationType.findByValue(iprot.readI32());
              struct.setOpTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NEW_FIELD_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                struct.newFieldValues = new HashMap<String,String>(2*_map32.size);
                String _key33;
                String _val34;
                for (int _i35 = 0; _i35 < _map32.size; ++_i35)
                {
                  _key33 = iprot.readString();
                  _val34 = iprot.readString();
                  struct.newFieldValues.put(_key33, _val34);
                }
                iprot.readMapEnd();
              }
              struct.setNewFieldValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OLD_FIELD_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                struct.oldFieldValues = new HashMap<String,String>(2*_map36.size);
                String _key37;
                String _val38;
                for (int _i39 = 0; _i39 < _map36.size; ++_i39)
                {
                  _key37 = iprot.readString();
                  _val38 = iprot.readString();
                  struct.oldFieldValues.put(_key37, _val38);
                }
                iprot.readMapEnd();
              }
              struct.setOldFieldValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARENTS_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                struct.parentsMap = new HashMap<String,String>(2*_map40.size);
                String _key41;
                String _val42;
                for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                {
                  _key41 = iprot.readString();
                  _val42 = iprot.readString();
                  struct.parentsMap.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
              struct.setParentsMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CRDTOperation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.primaryKey != null) {
        oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
        oprot.writeString(struct.primaryKey);
        oprot.writeFieldEnd();
      }
      if (struct.uniquePkValue != null) {
        oprot.writeFieldBegin(UNIQUE_PK_VALUE_FIELD_DESC);
        oprot.writeString(struct.uniquePkValue);
        oprot.writeFieldEnd();
      }
      if (struct.opType != null) {
        oprot.writeFieldBegin(OP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.opType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.newFieldValues != null) {
        if (struct.isSetNewFieldValues()) {
          oprot.writeFieldBegin(NEW_FIELD_VALUES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.newFieldValues.size()));
            for (Map.Entry<String, String> _iter44 : struct.newFieldValues.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.oldFieldValues != null) {
        if (struct.isSetOldFieldValues()) {
          oprot.writeFieldBegin(OLD_FIELD_VALUES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.oldFieldValues.size()));
            for (Map.Entry<String, String> _iter45 : struct.oldFieldValues.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeString(_iter45.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.parentsMap != null) {
        if (struct.isSetParentsMap()) {
          oprot.writeFieldBegin(PARENTS_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parentsMap.size()));
            for (Map.Entry<String, String> _iter46 : struct.parentsMap.entrySet())
            {
              oprot.writeString(_iter46.getKey());
              oprot.writeString(_iter46.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CRDTOperationTupleSchemeFactory implements SchemeFactory {
    public CRDTOperationTupleScheme getScheme() {
      return new CRDTOperationTupleScheme();
    }
  }

  private static class CRDTOperationTupleScheme extends TupleScheme<CRDTOperation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CRDTOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.tableName);
      oprot.writeString(struct.primaryKey);
      oprot.writeString(struct.uniquePkValue);
      oprot.writeI32(struct.opType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetNewFieldValues()) {
        optionals.set(0);
      }
      if (struct.isSetOldFieldValues()) {
        optionals.set(1);
      }
      if (struct.isSetParentsMap()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNewFieldValues()) {
        {
          oprot.writeI32(struct.newFieldValues.size());
          for (Map.Entry<String, String> _iter47 : struct.newFieldValues.entrySet())
          {
            oprot.writeString(_iter47.getKey());
            oprot.writeString(_iter47.getValue());
          }
        }
      }
      if (struct.isSetOldFieldValues()) {
        {
          oprot.writeI32(struct.oldFieldValues.size());
          for (Map.Entry<String, String> _iter48 : struct.oldFieldValues.entrySet())
          {
            oprot.writeString(_iter48.getKey());
            oprot.writeString(_iter48.getValue());
          }
        }
      }
      if (struct.isSetParentsMap()) {
        {
          oprot.writeI32(struct.parentsMap.size());
          for (Map.Entry<String, String> _iter49 : struct.parentsMap.entrySet())
          {
            oprot.writeString(_iter49.getKey());
            oprot.writeString(_iter49.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CRDTOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tableName = iprot.readString();
      struct.setTableNameIsSet(true);
      struct.primaryKey = iprot.readString();
      struct.setPrimaryKeyIsSet(true);
      struct.uniquePkValue = iprot.readString();
      struct.setUniquePkValueIsSet(true);
      struct.opType = util.thrift.CRDTOperationType.findByValue(iprot.readI32());
      struct.setOpTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.newFieldValues = new HashMap<String,String>(2*_map50.size);
          String _key51;
          String _val52;
          for (int _i53 = 0; _i53 < _map50.size; ++_i53)
          {
            _key51 = iprot.readString();
            _val52 = iprot.readString();
            struct.newFieldValues.put(_key51, _val52);
          }
        }
        struct.setNewFieldValuesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.oldFieldValues = new HashMap<String,String>(2*_map54.size);
          String _key55;
          String _val56;
          for (int _i57 = 0; _i57 < _map54.size; ++_i57)
          {
            _key55 = iprot.readString();
            _val56 = iprot.readString();
            struct.oldFieldValues.put(_key55, _val56);
          }
        }
        struct.setOldFieldValuesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.parentsMap = new HashMap<String,String>(2*_map58.size);
          String _key59;
          String _val60;
          for (int _i61 = 0; _i61 < _map58.size; ++_i61)
          {
            _key59 = iprot.readString();
            _val60 = iprot.readString();
            struct.parentsMap.put(_key59, _val60);
          }
        }
        struct.setParentsMapIsSet(true);
      }
    }
  }

}

