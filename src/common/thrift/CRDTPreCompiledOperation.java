/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package common.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-7")
public class CRDTPreCompiledOperation implements org.apache.thrift.TBase<CRDTPreCompiledOperation, CRDTPreCompiledOperation._Fields>, java.io.Serializable, Cloneable, Comparable<CRDTPreCompiledOperation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CRDTPreCompiledOperation");

  private static final org.apache.thrift.protocol.TField SQL_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlOp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SYMBOLS_FIELD_DESC = new org.apache.thrift.protocol.TField("symbols", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CRDTPreCompiledOperationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CRDTPreCompiledOperationTupleSchemeFactory());
  }

  public String sqlOp; // required
  public Set<String> symbols; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SQL_OP((short)1, "sqlOp"),
    SYMBOLS((short)2, "symbols");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SQL_OP
          return SQL_OP;
        case 2: // SYMBOLS
          return SYMBOLS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SYMBOLS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SQL_OP, new org.apache.thrift.meta_data.FieldMetaData("sqlOp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYMBOLS, new org.apache.thrift.meta_data.FieldMetaData("symbols", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CRDTPreCompiledOperation.class, metaDataMap);
  }

  public CRDTPreCompiledOperation() {
  }

  public CRDTPreCompiledOperation(
    String sqlOp)
  {
    this();
    this.sqlOp = sqlOp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CRDTPreCompiledOperation(CRDTPreCompiledOperation other) {
    if (other.isSetSqlOp()) {
      this.sqlOp = other.sqlOp;
    }
    if (other.isSetSymbols()) {
      Set<String> __this__symbols = new HashSet<String>(other.symbols);
      this.symbols = __this__symbols;
    }
  }

  public CRDTPreCompiledOperation deepCopy() {
    return new CRDTPreCompiledOperation(this);
  }

  @Override
  public void clear() {
    this.sqlOp = null;
    this.symbols = null;
  }

  public String getSqlOp() {
    return this.sqlOp;
  }

  public CRDTPreCompiledOperation setSqlOp(String sqlOp) {
    this.sqlOp = sqlOp;
    return this;
  }

  public void unsetSqlOp() {
    this.sqlOp = null;
  }

  /** Returns true if field sqlOp is set (has been assigned a value) and false otherwise */
  public boolean isSetSqlOp() {
    return this.sqlOp != null;
  }

  public void setSqlOpIsSet(boolean value) {
    if (!value) {
      this.sqlOp = null;
    }
  }

  public int getSymbolsSize() {
    return (this.symbols == null) ? 0 : this.symbols.size();
  }

  public java.util.Iterator<String> getSymbolsIterator() {
    return (this.symbols == null) ? null : this.symbols.iterator();
  }

  public void addToSymbols(String elem) {
    if (this.symbols == null) {
      this.symbols = new HashSet<String>();
    }
    this.symbols.add(elem);
  }

  public Set<String> getSymbols() {
    return this.symbols;
  }

  public CRDTPreCompiledOperation setSymbols(Set<String> symbols) {
    this.symbols = symbols;
    return this;
  }

  public void unsetSymbols() {
    this.symbols = null;
  }

  /** Returns true if field symbols is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbols() {
    return this.symbols != null;
  }

  public void setSymbolsIsSet(boolean value) {
    if (!value) {
      this.symbols = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SQL_OP:
      if (value == null) {
        unsetSqlOp();
      } else {
        setSqlOp((String)value);
      }
      break;

    case SYMBOLS:
      if (value == null) {
        unsetSymbols();
      } else {
        setSymbols((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SQL_OP:
      return getSqlOp();

    case SYMBOLS:
      return getSymbols();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SQL_OP:
      return isSetSqlOp();
    case SYMBOLS:
      return isSetSymbols();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CRDTPreCompiledOperation)
      return this.equals((CRDTPreCompiledOperation)that);
    return false;
  }

  public boolean equals(CRDTPreCompiledOperation that) {
    if (that == null)
      return false;

    boolean this_present_sqlOp = true && this.isSetSqlOp();
    boolean that_present_sqlOp = true && that.isSetSqlOp();
    if (this_present_sqlOp || that_present_sqlOp) {
      if (!(this_present_sqlOp && that_present_sqlOp))
        return false;
      if (!this.sqlOp.equals(that.sqlOp))
        return false;
    }

    boolean this_present_symbols = true && this.isSetSymbols();
    boolean that_present_symbols = true && that.isSetSymbols();
    if (this_present_symbols || that_present_symbols) {
      if (!(this_present_symbols && that_present_symbols))
        return false;
      if (!this.symbols.equals(that.symbols))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sqlOp = true && (isSetSqlOp());
    list.add(present_sqlOp);
    if (present_sqlOp)
      list.add(sqlOp);

    boolean present_symbols = true && (isSetSymbols());
    list.add(present_symbols);
    if (present_symbols)
      list.add(symbols);

    return list.hashCode();
  }

  @Override
  public int compareTo(CRDTPreCompiledOperation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSqlOp()).compareTo(other.isSetSqlOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSqlOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlOp, other.sqlOp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSymbols()).compareTo(other.isSetSymbols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbols, other.symbols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CRDTPreCompiledOperation(");
    boolean first = true;

    sb.append("sqlOp:");
    if (this.sqlOp == null) {
      sb.append("null");
    } else {
      sb.append(this.sqlOp);
    }
    first = false;
    if (isSetSymbols()) {
      if (!first) sb.append(", ");
      sb.append("symbols:");
      if (this.symbols == null) {
        sb.append("null");
      } else {
        sb.append(this.symbols);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sqlOp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sqlOp' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CRDTPreCompiledOperationStandardSchemeFactory implements SchemeFactory {
    public CRDTPreCompiledOperationStandardScheme getScheme() {
      return new CRDTPreCompiledOperationStandardScheme();
    }
  }

  private static class CRDTPreCompiledOperationStandardScheme extends StandardScheme<CRDTPreCompiledOperation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CRDTPreCompiledOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SQL_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sqlOp = iprot.readString();
              struct.setSqlOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYMBOLS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set90 = iprot.readSetBegin();
                struct.symbols = new HashSet<String>(2*_set90.size);
                String _elem91;
                for (int _i92 = 0; _i92 < _set90.size; ++_i92)
                {
                  _elem91 = iprot.readString();
                  struct.symbols.add(_elem91);
                }
                iprot.readSetEnd();
              }
              struct.setSymbolsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CRDTPreCompiledOperation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sqlOp != null) {
        oprot.writeFieldBegin(SQL_OP_FIELD_DESC);
        oprot.writeString(struct.sqlOp);
        oprot.writeFieldEnd();
      }
      if (struct.symbols != null) {
        if (struct.isSetSymbols()) {
          oprot.writeFieldBegin(SYMBOLS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.symbols.size()));
            for (String _iter93 : struct.symbols)
            {
              oprot.writeString(_iter93);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CRDTPreCompiledOperationTupleSchemeFactory implements SchemeFactory {
    public CRDTPreCompiledOperationTupleScheme getScheme() {
      return new CRDTPreCompiledOperationTupleScheme();
    }
  }

  private static class CRDTPreCompiledOperationTupleScheme extends TupleScheme<CRDTPreCompiledOperation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CRDTPreCompiledOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sqlOp);
      BitSet optionals = new BitSet();
      if (struct.isSetSymbols()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSymbols()) {
        {
          oprot.writeI32(struct.symbols.size());
          for (String _iter94 : struct.symbols)
          {
            oprot.writeString(_iter94);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CRDTPreCompiledOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sqlOp = iprot.readString();
      struct.setSqlOpIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set95 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.symbols = new HashSet<String>(2*_set95.size);
          String _elem96;
          for (int _i97 = 0; _i97 < _set95.size; ++_i97)
          {
            _elem96 = iprot.readString();
            struct.symbols.add(_elem96);
          }
        }
        struct.setSymbolsIsSet(true);
      }
    }
  }

}

