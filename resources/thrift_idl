namespace java util.thrift

struct ApplyDelta
{
    1: required string constraintId;
    2: required string deltaValue;
    3: required string rowId;
    4: required bool mustCoordinate;
}

struct RequestValue
{
    1: required string constraintId;
    2: required i32 opId;
    3: required string fieldName;
    4: string requestedValue;
    5: string tempSymbol;
}

struct UniqueValue
{
    1: required string constraintId;
    2: required string value;
}

struct CoordinatorResponse
{
    1: required bool success;
    2: list<RequestValue> requestedValues;
    3: string errorMessage;
}

struct CoordinatorRequest
{
    1: list<RequestValue> requests;
    2: list<UniqueValue> uniqueValues;
    3: list<ApplyDelta> deltaValues;
    4: required bool requiresCoordination;
}

enum CRDTOperationType {
    INSERT,
    INSERT_CHILD,
    UPDATE,
    UPDATE_CHILD,
    DELETE,
    DELETE_PARENT
}

struct CRDTOperation {
    1: required string tableName;
    2: required string primaryKey;
    3: required string uniquePkValue;
    4: required CRDTOperationType opType;
    5: optional string pkWhereClause;
    6: optional map<string,string> newFieldValues;
    7: optional map<string,string> oldFieldValues;
    //map between constraintId-parentPkValue
    8: optional map<string,string> parentsMap;
}

struct CRDTTransaction {
    1: required i32 id;
    2: i32 replicatorId;
    3: string txnClock;
    4: list<CRDTOperation> opsList;
    5: optional CoordinatorRequest requestToCoordinator;
    6: optional CRDTCompiledTransaction compiledTxn;
}

struct CRDTCompiledTransaction {
    1: required i32 id;
    2: i32 replicatorId;
    3: required string txnClock;
    4: required list<string> opsList;
}

struct ThriftOperation {
    1: required i32 txnId;
    2: required map<i32, string> operations;
    3: string clock
    4: required i32 replicatorId;
}

struct ThriftShadowTransaction {
    1: required i32 txnId;
    2: required map<i32,string> operations;
    3: CoordinatorRequest requestToCoordinator;
    4: map<i32,string> tempOperations;
    5: string clock
    6: i32 replicatorId;
}

service ReplicatorRPC {
 bool commitOperation(1:CRDTTransaction op);
 oneway void sendToRemote(1:CRDTCompiledTransaction transaction);
}


service CoordinatorRPC
{
    CoordinatorResponse checkInvariants(1:CoordinatorRequest request);
}